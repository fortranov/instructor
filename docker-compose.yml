# Docker Compose для Triplan

services:

  # Backend FastAPI сервис
  backend:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    # Порт не пробрасываем наружу - доступ только через nginx
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - SECRET_KEY={SECRET_KEY}
      - DB_PATH=/app/data/triplan.db
    volumes:
      # Монтируем директорию для базы данных
      - triplan_data:/app/data
   
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - reverse_proxy

  # Frontend Next.js приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    # Порт не пробрасываем наружу - доступ только через nginx
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - reverse_proxy
          

  # Nginx reverse proxy для продакшена
  #nginx:
  #  image: nginx:alpine
  #  container_name: triplan-nginx
  #  ports:
  #    - "80:80"
  #    - "443:443"
  #  volumes:
  #    - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #    - ./nginx/ssl:/etc/nginx/ssl:ro
  #  depends_on:
  #    - frontend
  #    - backend
  #  restart: unless-stopped
  #  networks:
  #    - triplan-network

# Создаем сеть для взаимодействия сервисов
networks:
  reverse_proxy:
    name: reverse_proxy
    external: true
    driver: bridge

# Создаем volume для данных базы
volumes:
  triplan_data:
    driver: local
