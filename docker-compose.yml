# Docker Compose для Triplan

services:
  # Сервис для выполнения миграций базы данных
  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: triplan-migrations
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DB_PATH=/app/data/triplan.db
    volumes:
      - triplan_data:/app/data
      - ./migrations:/app/migrations:ro
      - ./run_migrations.py:/app/run_migrations.py:ro
    command: ["python", "run_migrations.py", "migrate"]
    networks:
      - triplan-network
    restart: "no"  # Выполнить один раз и завершить

  # Backend FastAPI сервис
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: triplan-backend
    # Порт не пробрасываем наружу - доступ только через nginx
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_PATH=/app/data/triplan.db
    volumes:
      # Монтируем директорию для базы данных
      - triplan_data:/app/data
    depends_on:
      - migrations  # Ждать выполнения миграций
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - triplan-network

  # Frontend Next.js приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: triplan-frontend
    # Порт не пробрасываем наружу - доступ только через nginx
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - triplan-network

  # Nginx reverse proxy для продакшена
  nginx:
    image: nginx:alpine
    container_name: triplan-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - triplan-network

# Создаем сеть для взаимодействия сервисов
networks:
  triplan-network:
    driver: bridge

# Создаем volume для данных базы
volumes:
  triplan_data:
    driver: local
