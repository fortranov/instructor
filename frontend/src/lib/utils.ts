import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { format, parseISO, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay } from 'date-fns';
import { ru } from 'date-fns/locale';
import { SportType, WorkoutType, CompetitionType } from '@/types/api';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
export const formatDate = (date: Date | string, formatStr: string = 'dd.MM.yyyy'): string => {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;
  return format(dateObj, formatStr, { locale: ru });
};

export const formatDateISO = (date: Date): string => {
  return format(date, 'yyyy-MM-dd');
};

export const parseDate = (dateString: string): Date => {
  return parseISO(dateString);
};

export const getMonthDays = (date: Date): Date[] => {
  const start = startOfMonth(date);
  const end = endOfMonth(date);
  return eachDayOfInterval({ start, end });
};

export const isSameDateMonth = (date1: Date, date2: Date): boolean => {
  return isSameMonth(date1, date2);
};

export const isSameDateDay = (date1: Date, date2: Date): boolean => {
  return isSameDay(date1, date2);
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
export const formatDuration = (minutes: number): string => {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  
  if (hours === 0) {
    return `${mins}–º–∏–Ω`;
  }
  
  if (mins === 0) {
    return `${hours}—á`;
  }
  
  return `${hours}—á ${mins}–º–∏–Ω`;
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∏ —Ü–≤–µ—Ç–æ–≤ —Å–ø–æ—Ä—Ç–∞
export const getSportIcon = (sportType: SportType): string => {
  switch (sportType) {
    case SportType.RUNNING:
      return 'üèÉ';
    case SportType.CYCLING:
      return 'üö¥';
    case SportType.SWIMMING:
      return 'üèä';
    default:
      return 'üèÉ';
  }
};

export const getSportColor = (sportType: SportType): string => {
  switch (sportType) {
    case SportType.RUNNING:
      return 'bg-red-500';
    case SportType.CYCLING:
      return 'bg-blue-500';
    case SportType.SWIMMING:
      return 'bg-cyan-500';
    default:
      return 'bg-gray-500';
  }
};

export const getWorkoutTypeLabel = (workoutType: WorkoutType): string => {
  switch (workoutType) {
    case WorkoutType.ENDURANCE:
      return '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è';
    case WorkoutType.INTERVAL:
      return '–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è';
    case WorkoutType.RECOVERY:
      return '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∞—è';
    default:
      return workoutType;
  }
};

export const getWorkoutTypeColor = (workoutType: WorkoutType): string => {
  switch (workoutType) {
    case WorkoutType.ENDURANCE:
      return 'bg-green-100 text-green-800';
    case WorkoutType.INTERVAL:
      return 'bg-orange-100 text-orange-800';
    case WorkoutType.RECOVERY:
      return 'bg-blue-100 text-blue-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

export const getCompetitionTypeLabel = (competitionType: CompetitionType): string => {
  switch (competitionType) {
    case CompetitionType.RUN_10K:
      return '10 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤';
    case CompetitionType.RUN_HALF_MARATHON:
      return '–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω';
    case CompetitionType.RUN_MARATHON:
      return '–ú–∞—Ä–∞—Ñ–æ–Ω';
    case CompetitionType.CYCLING:
      return '–í–µ–ª–æ—Å–∏–ø–µ–¥';
    case CompetitionType.SWIMMING:
      return '–ü–ª–∞–≤–∞–Ω–∏–µ';
    case CompetitionType.TRIATHLON_SPRINT:
      return '–¢—Ä–∏–∞—Ç–ª–æ–Ω —Å–ø—Ä–∏–Ω—Ç';
    case CompetitionType.TRIATHLON_OLYMPIC:
      return '–¢—Ä–∏–∞—Ç–ª–æ–Ω –æ–ª–∏–º–ø–∏–π—Å–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è';
    case CompetitionType.TRIATHLON_IRONMAN:
      return '–¢—Ä–∏–∞—Ç–ª–æ–Ω –∂–µ–ª–µ–∑–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è';
    default:
      return competitionType;
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const isValidPassword = (password: string): boolean => {
  return password.length >= 6;
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
export const getErrorMessage = (error: unknown): string => {
  if (error instanceof Error) {
    return error.message;
  }
  
  if (typeof error === 'string') {
    return error;
  }
  
  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
};
