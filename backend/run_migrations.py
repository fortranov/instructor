#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import os
import sys
import argparse
from migrations.migration_manager import MigrationManager

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TriPlan")
    parser.add_argument("command", choices=["migrate", "rollback", "status"], 
                       help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--version", "-v", help="–í–µ—Ä—Å–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–∫–∞—Ç–∞")
    parser.add_argument("--db-path", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = args.db_path or os.getenv("DB_PATH", "../triplan.db")
    
    # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
    manager = MigrationManager(db_path)
    
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.abspath(db_path)}")
    print(f"üìÖ –í—Ä–µ–º—è: {os.popen('date /t && time /t').read().strip()}")
    print()
    
    if args.command == "migrate":
        print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        success = manager.run_migrations(args.version)
        sys.exit(0 if success else 1)
        
    elif args.command == "rollback":
        if not args.version:
            print("‚ùå –û—à–∏–±–∫–∞: –î–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python run_migrations.py rollback --version 001")
            sys.exit(1)
        
        print(f"‚è™ –û—Ç–∫–∞—Ç –¥–æ –≤–µ—Ä—Å–∏–∏ {args.version}...")
        success = manager.rollback_to_version(args.version)
        sys.exit(0 if success else 1)
        
    elif args.command == "status":
        manager.status()
        sys.exit(0)

if __name__ == "__main__":
    main()
