#!/usr/bin/env python3
"""
–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç —Å—Ö–µ–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
"""

print("üîç –ü–æ—à–∞–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º...")

try:
    print("1. –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã...")
    from pydantic import BaseModel, Field, EmailStr
    from typing import List, Optional
    from datetime import date, datetime
    from database import SportType, WorkoutType, CompetitionType
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
    exit(1)

try:
    print("2. –°–æ–∑–¥–∞–Ω–∏–µ TrainingPlanCreate...")
    class TrainingPlanCreate(BaseModel):
        uin: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        complexity: int = Field(..., ge=0, le=1000, description="–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞ –æ—Ç 0 –¥–æ 1000")
        competition_date: date = Field(..., description="–î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è")
        competition_type: CompetitionType = Field(..., description="–¢–∏–ø —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è")
        competition_distance: Optional[float] = Field(None, description="–î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ (–∫–º) –∏–ª–∏ –ø–ª–∞–≤–∞–Ω–∏—è (–º)")
    print("‚úÖ TrainingPlanCreate —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ TrainingPlanCreate: {e}")
    exit(1)

try:
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ WorkoutResponse...")
    class WorkoutResponse(BaseModel):
        id: int
        date: date
        sport_type: SportType
        duration_minutes: int
        workout_type: WorkoutType
        is_completed: bool = Field(default=False, description="–û—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        
        class Config:
            from_attributes = True
    print("‚úÖ WorkoutResponse —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ WorkoutResponse: {e}")
    exit(1)

try:
    print("4. –°–æ–∑–¥–∞–Ω–∏–µ TrainingPlanResponse (–±–µ–∑ workouts)...")
    class TrainingPlanResponse(BaseModel):
        id: int
        complexity: int
        competition_date: date
        competition_type: CompetitionType
        competition_distance: Optional[float]
        created_at: datetime
        updated_at: datetime
        
        class Config:
            from_attributes = True
    print("‚úÖ TrainingPlanResponse —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ TrainingPlanResponse: {e}")
    exit(1)

try:
    print("5. –°–æ–∑–¥–∞–Ω–∏–µ TrainingPlanWithWorkoutsResponse (—Å workouts)...")
    class TrainingPlanWithWorkoutsResponse(BaseModel):
        id: int
        complexity: int
        competition_date: date
        competition_type: CompetitionType
        competition_distance: Optional[float]
        created_at: datetime
        updated_at: datetime
        workouts: List[WorkoutResponse]  # –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–û–ë–õ–ï–ú–û–ô!
        
        class Config:
            from_attributes = True
    print("‚ùå TrainingPlanWithWorkoutsResponse —Å–æ–∑–¥–∞–Ω - –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨!")
except Exception as e:
    print(f"‚úÖ –û—à–∏–±–∫–∞ TrainingPlanWithWorkoutsResponse (–æ–∂–∏–¥–∞–µ–º–æ): —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

print("\nüéØ –ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
