#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TriPlan
"""

import sqlite3
import os
import json
import importlib
from typing import List, Dict, Any
from datetime import datetime

class MigrationManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = None):
        self.db_path = db_path or os.getenv("DB_PATH", "./triplan.db")
        self.migrations_table = "schema_migrations"
    
    def get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(self.db_path)
    
    def create_migrations_table(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.migrations_table} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                version VARCHAR(255) NOT NULL UNIQUE,
                description TEXT NOT NULL,
                executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                checksum VARCHAR(255)
            )
        """)
        
        conn.commit()
        conn.close()
    
    def get_executed_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute(f"SELECT version FROM {self.migrations_table} ORDER BY version")
            return [row[0] for row in cursor.fetchall()]
        except sqlite3.OperationalError:
            # –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return []
        finally:
            conn.close()
    
    def mark_migration_executed(self, version: str, description: str, checksum: str = None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            INSERT INTO {self.migrations_table} (version, description, checksum)
            VALUES (?, ?, ?)
        """, (version, description, checksum))
        
        conn.commit()
        conn.close()
    
    def execute_migration(self, migration_module):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
            migration_module.up()
            
            # –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            self.mark_migration_executed(
                migration_module.version,
                migration_module.description,
                getattr(migration_module, 'checksum', None)
            )
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_module.version} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_module.version}: {e}")
            return False
    
    def rollback_migration(self, migration_module):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç
            migration_module.down()
            
            # –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute(f"DELETE FROM {self.migrations_table} WHERE version = ?", 
                          (migration_module.version,))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_module.version} –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_module.version}: {e}")
            return False
    
    def get_pending_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å"""
        executed = self.get_executed_migrations()
        all_migrations = self.get_all_migrations()
        
        return [migration for migration in all_migrations if migration not in executed]
    
    def get_all_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        migrations_dir = os.path.dirname(__file__)
        migrations = []
        
        for filename in os.listdir(migrations_dir):
            if (filename.startswith("migration_") and 
                filename.endswith(".py") and 
                filename != "migration_manager.py"):
                version = filename.replace("migration_", "").replace(".py", "")
                migrations.append(version)
        
        return sorted(migrations)
    
    def run_migrations(self, target_version: str = None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.create_migrations_table()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        pending_migrations = self.get_pending_migrations()
        
        if target_version:
            pending_migrations = [m for m in pending_migrations if m <= target_version]
        
        if not pending_migrations:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            return True
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_migrations)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for migration in pending_migrations:
            print(f"  - {migration}")
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        success = True
        for migration_version in pending_migrations:
            try:
                migration_module = importlib.import_module(f"migrations.migration_{migration_version}")
                if not self.execute_migration(migration_module):
                    success = False
                    break
            except ImportError as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {migration_version}: {e}")
                success = False
                break
        
        if success:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success
    
    def rollback_to_version(self, target_version: str):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        print(f"üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ –≤–µ—Ä—Å–∏–∏ {target_version}...")
        
        executed = self.get_executed_migrations()
        migrations_to_rollback = [m for m in executed if m > target_version]
        
        if not migrations_to_rollback:
            print("‚úÖ –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            return True
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(migrations_to_rollback)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞:")
        for migration in reversed(migrations_to_rollback):
            print(f"  - {migration}")
        
        # –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        success = True
        for migration_version in reversed(migrations_to_rollback):
            try:
                migration_module = importlib.import_module(f"migrations.migration_{migration_version}")
                if not self.rollback_migration(migration_module):
                    success = False
                    break
            except ImportError as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {migration_version}: {e}")
                success = False
                break
        
        if success:
            print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å")
        
        return success
    
    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        
        executed = self.get_executed_migrations()
        all_migrations = self.get_all_migrations()
        pending = self.get_pending_migrations()
        
        print(f"  –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(all_migrations)}")
        print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(executed)}")
        print(f"  –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(pending)}")
        
        if executed:
            print("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in executed:
                print(f"  - {migration}")
        
        if pending:
            print("\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in pending:
                print(f"  - {migration}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import sys
    
    manager = MigrationManager()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python migration_manager.py migrate [version]  - –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("  python migration_manager.py rollback <version> - –û—Ç–∫–∞—Ç–∏—Ç—å –¥–æ –≤–µ—Ä—Å–∏–∏")
        print("  python migration_manager.py status            - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        return
    
    command = sys.argv[1]
    
    if command == "migrate":
        target_version = sys.argv[2] if len(sys.argv) > 2 else None
        manager.run_migrations(target_version)
    elif command == "rollback":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            return
        target_version = sys.argv[2]
        manager.rollback_to_version(target_version)
    elif command == "status":
        manager.status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    main()
